#include "decodec.h"

extern "C" {
#include "log.h"
}

#define MAX_AUDIO_FRAME_SIZE 96000 // 1 second of 48khz 16-bit audio

/* Minimum SDL audio buffer size, in samples. */
#define SDL_AUDIO_MIN_BUFFER_SIZE 512
/* Calculate actual buffer size keeping in mind not cause too frequent audio callbacks */
#define SDL_AUDIO_MAX_CALLBACKS_PER_SEC 30
static void sdl_audio_callback(void *opaque, Uint8 *stream, int len);
#define AUDIOFRAME 8
#define VIDEOFRAME 3
Decodec::Decodec() {
  dump_file_ = std::make_unique<FileDump>("audio.pcm");

  if (!(audio_frame_ = av_frame_alloc())) {
    log_error("Could not allocate audio audio_frame_\n");
  }
  // if (!(video_frame_ = av_frame_alloc())) {
  //   log_error("Could not allocate audio video_frame_\n");
  // }

  aduio_codec_info_ = (AVCodecParameters *)malloc(sizeof(AVCodecParameters));
  video_codec_info_ = (AVCodecParameters *)malloc(sizeof(AVCodecParameters));

  audio_decodec_ctx_ = nullptr;
  video_decodec_ctx_ = nullptr;
  audio_decodec_ = nullptr;
  video_decodec_ = nullptr;
  audio_frame_resample_ = nullptr;
}

Ret Decodec::InitSDL() {
  sdl_flag_ = SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER;
  if (SDL_Init(sdl_flag_) < 0) {
    log_error("Could not initialize SDL - %s\n", SDL_GetError());
    log_error("(Did you set  the DISPLAY variable?)\n");
    return Ret_ERROR;
  }

  if (InitVideoSDL() != Ret_OK) {
    log_error("init sdl video failed");
    return Ret_ERROR;
  }
  // InitAuido要在InitVideo之后执行具体原因不清楚
 if (InitAudioSDL() != Ret_OK) {
   log_error("init sdl audio failed");
   return Ret_ERROR;
 }

  return Ret_OK;
}

Ret Decodec::InitAudioSDL() {
  // ToDo 目前写死
  want_audio_spec_.freq = 48000;
  // want_audio_spec_.format = AV_SAMPLE_FMT_S16; // ffmpeg定义
  want_audio_spec_.format = AUDIO_S16LSB; // SDL 定义
  want_audio_spec_.channels = 2;
  want_audio_spec_.silence = 0;
  // want_audio_spec_.samples = 1024;
 want_audio_spec_.samples = FFMAX(SDL_AUDIO_MIN_BUFFER_SIZE,
                                2 << av_log2(want_audio_spec_.freq / SDL_AUDIO_MAX_CALLBACKS_PER_SEC));
  want_audio_spec_.callback = sdl_audio_callback;
  want_audio_spec_.userdata = this;
  int num = SDL_GetNumAudioDevices(0);
  const char *deviceName = SDL_GetAudioDeviceName(num, 0);
  if ((audio_dev =
           SDL_OpenAudioDevice(deviceName, 0, &want_audio_spec_, nullptr,
                               SDL_AUDIO_ALLOW_FREQUENCY_CHANGE)) < 2) {
    log_error("can't open audio.\n");
    return Ret_ERROR;
  }
  SDL_PauseAudioDevice(audio_dev, 0);
  return Ret_OK;
}
Ret Decodec::InitVideoSDL() {
  default_window_width_ = 640;
  default_window_height_ = 480;
  alwaysontop_ = false; // 始终置顶
  borderless_ = false;  // 无边框
  window_ = nullptr;
#if SDL_VERSION_ATLEAST(2, 0, 5)
  sdl_flag_ |= SDL_WINDOW_ALWAYS_ON_TOP;
#else
  log_debug("Your SDL version doesn't support SDL_WINDOW_ALWAYS_ON_TOP.Feature "
            "will be inactive");
#endif
 if (borderless_)
   sdl_flag_ |= SDL_WINDOW_BORDERLESS;
 else
   sdl_flag_ |= SDL_WINDOW_RESIZABLE;

 window_ = SDL_CreateWindow("Big Fat Player", SDL_WINDOWPOS_UNDEFINED,
                            SDL_WINDOWPOS_UNDEFINED, video_codec_info_->width,
                            video_codec_info_->height, SDL_WINDOW_SHOWN);
 // 告诉 SDL 在渲染器缩放纹理时，使用线性插值方法进行过滤
 SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "linear");
 if (window_) {
   // 创建renderer
   renderer_ = SDL_CreateRenderer(
       window_, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
   if (!renderer_) {
     log_error("Failed to initialize a hardware accelerated renderer: %s\n",
               SDL_GetError());
     renderer_ = SDL_CreateRenderer(window_, -1, 0);
   }
   if (renderer_) {
     if (!SDL_GetRendererInfo(renderer_, &renderer_info_))
       log_debug(NULL, AV_LOG_VERBOSE, "Initialized %s renderer.\n",
                 renderer_info_.name);
   }
 }
 video_texture_ = SDL_CreateTexture(
     renderer_, SDL_PIXELFORMAT_IYUV, SDL_TEXTUREACCESS_STREAMING,
     video_codec_info_->width, video_codec_info_->height);
 if (!window_ || !renderer_ || !renderer_info_.num_texture_formats ||
     !video_texture_) {
   log_debug("Failed to create window or renderer: %s", SDL_GetError());
   return Ret_ERROR;
 }
//  video_rendor_thread_ =
//      std::make_unique<std::thread>(&Decodec::VideoRendorThread, this);
  return Ret_OK;
}

void Decodec::VideoRendor() {

  int ret = 0;
  while (1) {
    AVFrame *video_frame = (AVFrame *)video_frame_queue_->Pop();
    //dump_file_->WriteVideoYUV420PData(video_frame);
    if (video_frame) {
    
      ret = SDL_UpdateYUVTexture(video_texture_, nullptr, video_frame->data[0],
                                 video_frame->linesize[0], video_frame->data[1],
                                 video_frame->linesize[1], video_frame->data[2],
                                 video_frame->linesize[2]);
        // SDL_UpdateTexture(video_texture_, NULL, video_frame->data[0], video_frame->linesize[0]);
      if (ret < 0) {
        log_error("Failed to SDL_UpdateYUVTexture: %s", SDL_GetError());
      }
       
      ret = SDL_RenderClear(renderer_);
      if (ret < 0) {
        log_error("Failed to SDL_RenderClear %s", SDL_GetError());
      }
      
      ret = SDL_RenderCopy(renderer_, video_texture_, nullptr, nullptr);
      if (ret < 0) {
        log_error("Failed to render texture: %s", SDL_GetError());
      }
     
      SDL_RenderPresent(renderer_);
      SDL_Delay(40); // 控制帧率大约为 25fps (1000ms / 25 = 40ms)
                      SDL_Event event;
      SDL_PollEvent(&event);
                if (event.type == SDL_QUIT) {
                    av_frame_free(&video_frame);
                  
                }
      av_frame_free(&video_frame);
    }
  }
}
Decodec::~Decodec() {
  if (audio_decode_thread_->joinable()) {
    audio_decode_thread_->join();
  }
  if (video_decode_thread_->joinable()) {
    video_decode_thread_->join();
  }

  free(aduio_codec_info_);
  free(video_codec_info_);
  SDL_DestroyTexture(video_texture_);
  SDL_DestroyRenderer(renderer_);
  SDL_DestroyWindow(window_);
  av_frame_free(&audio_frame_);
  // av_frame_free(&audio_frame_resample_);
}
Ret Decodec::Init() {
  Ret ret = Ret_OK;
  // audio_frame_queue_ = std::make_shared<PacketQueue>(AUDIOFRAME, "audioframe");
  audio_ringbuf_ = std::make_shared<RingBuffer>(MAX_AUDIO_FRAME_SIZE*2*2);
  video_frame_queue_ = std::make_shared<PacketQueue>(VIDEOFRAME, "vidoeframe");
  ret = InitAudio();
  ret = InitVideo();
  if (InitSDL() != Ret_OK) {
    log_error("init sdl failed");
  }

  audio_resample_ = std::make_unique<AudioReSample>();
  audio_resample_->Init(
      aduio_codec_info_->sample_rate,
      av_get_channel_layout_nb_channels(aduio_codec_info_->channel_layout),
      (AVSampleFormat)aduio_codec_info_->format, want_audio_spec_.freq,
      want_audio_spec_.channels,
      TransforSDLFormattoFFmpeg((AVSampleFormat)want_audio_spec_.format));
  return ret;
}
void Decodec::setAudioQueue(std::shared_ptr<PacketQueue> pkt_queue) {
  audio_pkt_queue_ = std::move(pkt_queue);
}
void Decodec::setVideoQueue(std::shared_ptr<PacketQueue> pkt_queue) {
  video_pkt_queue_ = std::move(pkt_queue);
}
Ret Decodec::setVolume(int volume) { return Ret_OK; }

void Decodec::StartDecode() {

//  DumpAudioCodecInfo();
 audio_decode_thread_ =
     std::make_unique<std::thread>(&Decodec::AudioThread, this);
  video_decode_thread_ =
      std::make_unique<std::thread>(&Decodec::VideoThread, this);
}

void Decodec::VideoThread() {
  while (1) {
    AVPacket *video_pkt = (AVPacket *)video_pkt_queue_->Pop();
    DecodeVideo(video_pkt);
    av_packet_free(&video_pkt);
  }
}

Ret Decodec::DecodeVideo(AVPacket *video_pkt) {
  int ret = avcodec_send_packet(video_decodec_ctx_, video_pkt);
  if (ret < 0) {
    log_error("Failed to send packet to decoder\n");
    return Ret_ERROR;
  }
  /* read all the output frames (in general there may be any number of them */
  while (ret >= 0) {
    AVFrame *video_frame = nullptr;
    if (!(video_frame = av_frame_alloc())) {
      log_error("Could not allocate audio video_frame_\n");
    }
    ret = avcodec_receive_frame(video_decodec_ctx_, video_frame);
    if (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF)
      return Ret_ERROR;
    else if (ret < 0) {
      log_error("Error during decoding\n");
      return Ret_ERROR;
    }
    video_frame_queue_->Push(video_frame);
    //dump_file_->WriteVideoYUV420PData(video_frame_);
   

  }
}
void Decodec::AudioThread() {
  while (1) {
    AVPacket *audio_pkt = (AVPacket *)audio_pkt_queue_->Pop();
   // dump_file_->WriteBitStream(audio_pkt, audio_pkt->size,audio_decodec_ctx_->codec_id);
   DecodeAudio(audio_pkt);
    av_packet_free(&audio_pkt);
  }
}

Ret Decodec::DecodeAudio(AVPacket *audio_pkt) {
  int ret = avcodec_send_packet(audio_decodec_ctx_, audio_pkt);
  if (ret < 0) {
    log_error("Failed to send packet to decoder\n");
    return Ret_ERROR;
  }
  int data_size = 0;

  int channel_index = 0;
  /* read all the output frames (in general there may be any number of them */
  while (ret >= 0) {
    // 解析出来的是32bit float planar 小端数据
    ret = avcodec_receive_frame(audio_decodec_ctx_, audio_frame_);
    if (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF)
      return Ret_ERROR;
    else if (ret < 0) {
      log_error("Error during decoding\n");
      return Ret_ERROR;
    }
    data_size = av_get_bytes_per_sample(audio_decodec_ctx_->sample_fmt);
    if (data_size < 0) {
      /* This should not occur, checking just for paranoia */
      log_error("Failed to calculate data size\n");
      return Ret_ERROR;
    }
    //dump_file_->WritePcmPlanarData(audio_frame_->data, data_size);
    log_debug("audio_frame nb_samples = %d", audio_frame_->nb_samples);
    if (!(audio_frame_resample_ = AllocOutFrame())) {
      log_error("Could not allocate audio audio_frame_resample_\n");
    }
    // // audio_frame_resample_是resample之后的数据，
     int resample_sample_number = audio_resample_->audio_resampler_send_frame(
         audio_frame_, audio_frame_resample_);

      // dump_file_->WritePcmData(audio_frame_resample_->extended_data,
      //                          resample_sample_number * 2 * 2);
audio_ringbuf_->push(audio_frame_resample_->extended_data[0],resample_sample_number * 2 * 2);
//  std::vector<uint8_t> temp = audio_ringbuf_->pop(resample_sample_number * 2 *1.5); //for test

//dump_file_->WritePcmData(temp.data(),temp.size());

     //audio_frame_queue_->Push(audio_frame_resample_);
     av_frame_free(&audio_frame_resample_);
  }
}
AVFrame *Decodec::AllocOutFrame() {
  int ret;
  AVFrame *frame = av_frame_alloc();
  if (!frame) {
    return NULL;
  }
  
  //  frame->nb_samples = want_audio_spec_.samples;
  frame->nb_samples = 1500;
  frame->channel_layout =
      av_get_default_channel_layout(want_audio_spec_.channels);
  frame->format = TransforSDLFormattoFFmpeg(want_audio_spec_.format);
  frame->sample_rate = want_audio_spec_.freq;
  ret = av_frame_get_buffer(frame, 0);
  if (ret < 0) {
    log_error("cannot allocate audio data buffer\n");
    return NULL;
  }
  return frame;
}

Ret Decodec::setAudioAvCodecInfo(AVCodecParameters *dec) {
  if (aduio_codec_info_ == nullptr && dec == nullptr) {
    return Ret_ERROR;
  }
  memcpy(aduio_codec_info_, dec, sizeof(AVCodecParameters));
  return Ret_OK;
}
Ret Decodec::setVideoAvCodecInfo(AVCodecParameters *dec) {
  if (video_codec_info_ == nullptr && dec == nullptr) {
    return Ret_ERROR;
  }
  memcpy(video_codec_info_, dec, sizeof(AVCodecParameters));
  return Ret_OK;
}

void Decodec::DumpAudioCodecInfo() {
  log_debug("\n----- Audio info:\n");
  // sample_rate: 音频编解码器的采样率，单位为Hz
  log_debug("samplerate:%dHz\n", aduio_codec_info_->sample_rate);
  // channels: 音频通道数，单声道为1，双声道为2，5.1声道为6
  log_debug("channels:%d\n", aduio_codec_info_->channels);
  // channel_layout:
  // 音频通道布局，用于描述音频通道的布局，例如立体声为2个通道，左声道为1，右声道为2
  log_debug("channel_layout:%d\n", aduio_codec_info_->channel_layout);
  // codec_type: 音频编解码器的类型，通常为AVMEDIA_TYPE_AUDIO
  log_debug("codec_type:%d\n", aduio_codec_info_->codec_type);
}

void Decodec::DumpvideoCodecInfo() {
  log_debug("\n----- Video info:\n");
  // index: 每个流成分在ffmpeg解复用分析后都有唯一的index作为标识
}

Ret Decodec::InitAudio() {
  /* find decoder for the stream */
  audio_decodec_ = avcodec_find_decoder(aduio_codec_info_->codec_id);
  if (!audio_decodec_) {
    log_error("Failed to find %s codec\n",
              av_get_media_type_string(aduio_codec_info_->codec_type));
    return Ret_ERROR;
  }

  /* Allocate a codec context for the decoder */
  audio_decodec_ctx_ = avcodec_alloc_context3(audio_decodec_);
  if (!audio_decodec_ctx_) {
    log_error("Failed to allocate the %s codec context\n",
              av_get_media_type_string(aduio_codec_info_->codec_type));
    return Ret_ERROR;
  }
  /* Copy codec parameters from input stream to output codec context */
  if (avcodec_parameters_to_context(audio_decodec_ctx_, aduio_codec_info_) <
      0) {
    log_error("Failed to copy %s codec parameters to decoder context\n",
              av_get_media_type_string(aduio_codec_info_->codec_type));
    return Ret_ERROR;
  }
  /* Init the decoders, with or without reference counting */
  // av_dict_set(&opts, "refcounted_frames", refcount ? "1" : "0", 0);
  if (avcodec_open2(audio_decodec_ctx_, audio_decodec_, nullptr) < 0) {
    log_error("Failed to open %s codec\n",
              av_get_media_type_string(aduio_codec_info_->codec_type));
    return Ret_ERROR;
  }
}
Ret Decodec::InitVideo() {
  /* find decoder for the stream */
  video_decodec_ = avcodec_find_decoder(video_codec_info_->codec_id);
  if (!video_decodec_) {
    log_error("Failed to find %s codec\n",
              av_get_media_type_string(video_codec_info_->codec_type));
    return Ret_ERROR;
  }

  /* Allocate a codec context for the decoder */
  video_decodec_ctx_ = avcodec_alloc_context3(video_decodec_);
  if (!video_decodec_ctx_) {
    log_error("Failed to allocate the %s codec context\n",
              av_get_media_type_string(video_codec_info_->codec_type));
    return Ret_ERROR;
  }
  /* Copy codec parameters from input stream to output codec context */
  if (avcodec_parameters_to_context(video_decodec_ctx_, video_codec_info_) <
      0) {
    log_error("Failed to copy %s codec parameters to decoder context\n",
              av_get_media_type_string(video_codec_info_->codec_type));
    return Ret_ERROR;
  }
  /* Init the decoders, with or without reference counting */
  // av_dict_set(&opts, "refcounted_frames", refcount ? "1" : "0", 0);
  if (avcodec_open2(video_decodec_ctx_, video_decodec_, nullptr) < 0) {
    log_error("Failed to open %s codec\n",
              av_get_media_type_string(video_codec_info_->codec_type));
    return Ret_ERROR;
  }
}


static void sdl_audio_callback(void *opaque, Uint8 *stream, int len) {
    // 获取传入的解码器对象
    Decodec *temp_decoec = (Decodec *)opaque;
    
    // 记录当前需要处理的字节数
    int len1 = 0;
    
    // 用于存储解码后的数据
    static std::vector<uint8_t> audio_buf; 
    static unsigned int audio_buf_index = 0; // 当前缓冲区索引
    static unsigned int audio_buf_size = 0;  // 缓冲区中剩余数据的大小

    // 清空 SDL 的音频缓冲区，防止残留数据
    SDL_memset(stream, 0, len);

    // 处理每个回调需要的 `len` 数据
    while (len > 0) {
        // 如果缓冲区为空，则需要从 ringbuf 中获取新的数据
        if (audio_buf_index >= audio_buf_size) {
            // 从 ringbuf 中 pop 音频数据
            audio_buf = temp_decoec->audio_ringbuf_->pop(len);

            // 更新缓冲区大小
            audio_buf_size = audio_buf.size();
            audio_buf_index = 0; // 重置索引

            // 如果 ringbuf 中没有足够的数据，返回的数据小于 len
            if (audio_buf_size == 0) {
                // 如果 ringbuf 里没有数据，填充静音
                SDL_memset(stream, 0, len);
                return;
            }
        }

        // 计算当前回调中需要的数据长度
        len1 = audio_buf_size - audio_buf_index;

        // 如果当前缓冲区的数据大于等于需要填充的长度
        if (len1 > len) {
            len1 = len;
        }

        // 把缓冲区的数据拷贝到 SDL 的音频缓冲区中
        SDL_MixAudioFormat(stream, &audio_buf[audio_buf_index], AUDIO_S16SYS, len1, SDL_MIX_MAXVOLUME);

        // 更新索引和剩余长度
        len -= len1;
        stream += len1;
        audio_buf_index += len1;
    }
}

AVSampleFormat Decodec::TransforSDLFormattoFFmpeg(int SDL_format) {
  switch (SDL_format) {
  case AUDIO_S16SYS:
    return AV_SAMPLE_FMT_S16;
  case AUDIO_S32SYS:
    return AV_SAMPLE_FMT_S32;
  case AUDIO_S16MSB:
    return AV_SAMPLE_FMT_S16;
  case AUDIO_U8:
    return AV_SAMPLE_FMT_U8;
  default:
    return AV_SAMPLE_FMT_NONE;
  }
}
